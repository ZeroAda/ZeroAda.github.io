<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GNN on Orange</title>
    <link>https://ZeroAda.github.io/tags/gnn/</link>
    <description>Recent content in GNN on Orange</description>
    <image>
      <url>https://ZeroAda.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ZeroAda.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ZeroAda.github.io/tags/gnn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Graph Convolution Neural Network</title>
      <link>https://ZeroAda.github.io/posts/gcn/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ZeroAda.github.io/posts/gcn/</guid>
      <description>GCN GCN originates from the article SEMI-SUPERVISED CLASSIFICATION WITH GRAPH CONVOLUTIONAL NETWORKS. Suppose there is a undirected graph G(V,E) with vertices V and edges E. It has an adjacency matrix A(VxV). Each node has a feature and the feature matrix is X(VxN) We want to classify the nodes into M categories using neural network f(X,A). $$ f(X,A) = softmax(\hat{A} ReLU(\hat{A} XW(0))W(1)) $$ where $$ \hat{A} = D^{-\frac{1}{2}}AD^{-\frac{1}{2}} $$ It computes the symmetrically normalized adjacency matrix of G.</description>
    </item>
    
  </channel>
</rss>
